<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Encryption/Decryption App</title>
  <link rel="stylesheet" href="/css/index.css">
</head>
<body>
  <div class="main-container">
    <h1>Encryption/Decryption App</h1>
    <form>
      <table>
        <tr>
          <td>Input Type:</td>
          <td>
            <select id="input-type">
              <option value="text" selected>Text</option>
              <option value="file">File</option>
            </select>
          </td>
        </tr>
        <tr class="dynamic-row-text">
          <td>Input Text (string):</td>
          <td>
            <textarea id="input-text"></textarea>
          </td>
          <td>Input Text (base64):</td>
          <td>
            <textarea id="input-text-64" readonly></textarea>
          </td>
        </tr>
        <tr class="dynamic-row-file">
          <td>Input File:</td>
          <td><input type="file" id="input-file"></td>
        </tr>
        <tr>
          <td>Cipher:</td>
          <td>
            <select id="cipher">
              <option value="vigenere">Vigenere Cipher</option>
              <option value="auto-key">Auto-Key Vigenere Cipher</option>
              <option value="extended">Extended Vigenere Cipher</option>
              <option value="playfair">Playfair Cipher</option>
              <option value="affine">Affine Cipher</option>
              <option value="hill">Hill Cipher</option>
              <option value="super">Super Encryption</option>
              <option value="enigma">Enigma Machine</option>
            </select>
          </td>
        </tr>
        <tr>
          <td>Key:</td>
          <td><input type="text" id="input-key"></td>
        </tr>
        <tr>
          <td>Key A (Affine Cipher):</td>
          <td><input type="number" id="input_key_a"></td>
        </tr>
        <tr>
          <td>Key B (Affine Cipher):</td>
          <td><input type="number" id="input_key_b"></td>
        </tr>
        <tr>
          <td>Matrix Size (Hill Cipher):</td>
          <td>
            <select id="matrix_size">
            <option value="2">2</option>
            <option value="3">3</option>
          </select>
          </td>
        </tr>
        <tr>
          <td>Matrix Key for Hill Cipher (ex: 1,2,5,-9 for matrix size 2):</td>
          <td><input type="text" id="matrix"></td>
        <tr>
          <td colspan="2">
            <button 
              class="button-primary"
              type="button"
              onclick="encrypt()"
            >
              Encrypt
            </button>
          </td>
          <td colspan="2">
            <button
              class="button-primary"
              type="button"
              onclick="decrypt()"
            >
              Decrypt
            </button>
          </td>
        </tr>
        <tr>
          <td>Result (string):</td>
          <td>
            <textarea id="response" readonly></textarea>
          </td>
          <td>Result (base64):</td>
          <td>
            <textarea id="response-64" readonly></textarea>
          </td>
        </tr>
        <tr>
          <td></td>
          <td>
            <button
              type="button"
              onclick="download()"
            >
              Download as file
            </button>
          </td>
        </tr>
      </table>
    </form>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <script src="/js/index.js"></script>


  <%# <script>
    /* Existing JavaScript from your version for dynamic input handling */
    const inputTypeSelect = document.getElementById('input-type');
    const inputTextRow = document.querySelector('.dynamic-row-text');
    const inputFileRow = document.querySelector('.dynamic-row-file');
    const inputText = document.getElementById('input-text');

    // Set text input as visible and enabled initially
    inputTextRow.style.display = 'table-row';
    inputText.disabled = false;
    inputFileRow.style.display = 'none';

    inputTypeSelect.addEventListener('change', (event) => {
      if (event.target.value === 'text') {
        inputTextRow.style.display = 'table-row';
        inputText.disabled = false;
        inputFileRow.style.display = 'none';
      } else {
        inputTextRow.style.display = 'none';
        inputText.disabled = true;
        inputFileRow.style.display = 'table-row';
      }
    });

    // Replace with AJAX-based form submission (adjust endpoint URL)
    document.querySelector('form').addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent default form submission behavior

      const formData = new FormData(event.target);
      const url = '/encrypt'; // Adjust based on your Sinatra route

      fetch(url, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        resultDiv.textContent = data.result;
      })
      .catch(error => {
        resultDiv.textContent = 'An error occurred: ' + error;
      });
    });
  </script> %>
</body>
</html>
